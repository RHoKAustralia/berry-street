buildscript {
    repositories {
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
    }
}

plugins {
    id 'com.wiredforcode.spawn' version '0.8.2'
    id 'au.com.dius.pact' version '3.5.11'
}
apply plugin: 'groovy'
//apply plugin: 'codenarc'
apply plugin: 'spring-boot'
apply plugin: 'idea'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    compile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile "org.codehaus.groovy.modules.http-builder:http-builder:$httpBuilderVersion"

    compile "io.springfox:springfox-swagger2:$springfoxVersion"
    compile "io.springfox:springfox-swagger-ui:$springfoxVersion"

    compile "org.springframework.boot:spring-boot-starter-actuator:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
    compile "org.springframework.data:spring-data-neo4j:$springDataNeo4jVersion"

    compile "org.neo4j:neo4j-ogm-embedded-driver:$neo4jOgmVersion"
    compile "joda-time:joda-time:$jodatimeVersion"

    compile "com.voodoodyne.jackson.jsog:jackson-jsog:$jacksonVersion"

    testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
}

bootRun {
    addResources = true
    systemProperties = System.properties

}

springBoot {
    executable = true
}

def buildNumber() {
    def buildNum = '0'
    if (hasProperty('buildNumber')) {
        buildNum = buildNumber
    }
    buildNum
}

version = "0.0.${buildNumber()}"
project.group = 'au.org.berrystreet'

jar {
    baseName = 'berry-api'
    version = version
}

////////////////////////////////////////////

////////////////////////////////////////////
// codenarc

//processResources {
//    filesMatching("**/application.properties") {
//        expand(project.properties)
//    }
//}

//codenarc {
//    toolVersion = "0.25.2"
//}
//
//codenarcMain {
//    configFile = rootProject.file("config/codenarc/rules.groovy")
//}
//
//codenarcTest {
//    configFile = rootProject.file("config/codenarc/rules.groovy")
//}

////////////////////////////////////////////

import com.wiredforcode.gradle.spawn.*
task startProvider(type: SpawnProcessTask, dependsOn: 'assemble') {
    command "java -Dspring.profiles.active=test -jar ${jar.archivePath}"
    ready 'Started Application'
}
task stopProvider(type: KillProcessTask) { }

def props = ['account', 'username', 'password']
    .inject([:]) { acc, it ->
        def propName = "pactBroker${it.capitalize()}"
        acc << [(it): System.env[propName] ?: project.findProperty(propName)]
    }

pact {
    serviceProviders {
        'Case Graph Provider' {
            startProviderTask = startProvider
            terminateProviderTask = stopProvider
            stateChangeUrl = url('http://localhost:8080/pactStateChange')

            hasPactsFromPactBroker(
                "https://${props.account}.pact.dius.com.au",
                authentication: ['Basic', props.username, props.password]
            )
        }
    }
}
